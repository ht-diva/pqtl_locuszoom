# import required libraries
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("8.4.1")

# read the configuration file
configfile: "conf/config.yaml"

include: "rules/common.smk"

rule all:
    input: 
        expand(str(Path(config.get("path_out"), "plot/{seqid}.sentinel")), seqid = lb.phenotype_id),


rule compute_ld:
    input:
        loci = str(Path(config.get("locus_file"), "break/{seqid}_loci.csv")),
    output:
        sentinel = str(Path(config.get("path_out"), "ld/{seqid}.sentinel")),
    params:
        #loci = get_locus,
        bfile = config["genotype"],
        ofile = str(Path(config.get("path_out"), "ld/{seqid}")),
    resources:
        runtime=lambda wc, attempt: 120 + attempt * 60,
    shell:
        """
    loci_list={input.loci};
    
    while IFS=, read -r col1 col2 col3 col4 col5 col6_onwards; do
        chr=$col1
        beg=$col2
        end=$col3
        snp=$col5
        loc=${{col1}}_${{col2}}_${{col3}}

        if [[ "$chr" != "chr" ]]; then
        
            echo "Coordinates: ${{loc}}"
        
            plink   \
            --bfile  {params.bfile}"$chr"  \
            --keep-allele-order \
            --ld-snp "$snp" \
            --chr "$chr" --from-bp "$beg" --to-bp "$end" \
            --r2  \
            --ld-window 99999  \
            --ld-window-r2 0  \
            --out {params.ofile}_chr"$loc"  \
            --threads 8  \
            --memory 16000

            echo "====================================================================="
        fi
    
    done < "$loci_list"
    touch {output.sentinel}
"""


rule reshape_ld:
    input:
        sentinel = str(Path(config.get("path_out"), "ld/{seqid}.sentinel")),
    output:
        sentinel = str(Path(config.get("path_out"), "ld_reshaped/{seqid}.sentinel")),
    params:
        loci = str(Path(config.get("locus_file"), "break/{seqid}_loci.csv")),
        ofile = str(Path(config.get("path_out"), "ld_reshaped/{seqid}")),
        ld = str(Path(config.get("path_out"), "ld/{seqid}")),
    resources:
        runtime=lambda wc, attempt: 120 + attempt * 60,
    shell:
        """
    loci_list={params.loci};
    ifile=$(echo {params.ld})
    ofile=$(echo {params.ofile})

    while IFS=, read -r col1 col2 col3 col4_onwards; do

        chr=$col1
        loc=${{col1}}_${{col2}}_${{col3}}
        ld_messi=${{ifile}}_chr${{loc}}.ld
        ld_tidy="${{ofile}}"_chr${{loc}}.ld

        if [[ "$chr" != "chr" ]]; then
        
            echo "Coordinates: ${{loc}}"
            echo "file name is: ${{ld_messi}}"
            
            # Here reshapes plink LD file to the desired structure by LZ (https://genome.sph.umich.edu/wiki/LocusZoom_Standalone#User-supplied_LD)
            # First awk takes input, output of plink1 for a 1-to-all combinations of the SNPs within a region, and
            # removes white spaces from columns and make it tab-separated.
            # Second awk reorders 4 required columns of LD file for LZ after after duplicating rsquare to replace with dprime -> Note: Snakemake cannot interpret square bracet; it confilcts with internal SMK variable and retuens error once making DAG of jobs.
            # First sed -e changes headers to snp1 (aby snp in the region), snp2 (reference snp), D` and R2 (LD measures)
            # Second sed -E converts SNP id from chr:pos:ref:alt to chr:pos_ref/alt to allow merge with annotation in LZ sqlite database

            awk -v OFS="\t" '$1=$1' $ld_messi | awk '{{print $6"\t"$3"\t"$7"\t"$7}}' OFS="\t"  |  sed -e '1s/SNP_B/snp1/' -e '1s/SNP_A/snp2/' -e '1s/R2/dprime/' -e '1s/R2/rsquare/'  |  sed -E 's/([0-9]+:[0-9]+):([A-Z]+):([A-Z]+)/\\1_\\2\/\\3/g'  >  $ld_tidy                  

            echo "=====================================================================\n\n"
        fi

    done < "$loci_list"
    touch {output.sentinel} # create a sentinel file to link this rule to the next one
        """

rule draw_plot:
    input:
        gwas = str(Path(config.get("gwas_file"), "{seqid}/{seqid}.gwaslab.tsv.bgz")),
        sentinel = str(Path(config.get("path_out"), "ld_reshaped/{seqid}.sentinel")),
    output:
        sentinel =str(Path(config.get("path_out"), "plot/{seqid}.sentinel")),
    params:
        loci = str(Path(config.get("locus_file"), "break/{seqid}_loci.csv")),
        ofile = str(Path(config.get("path_out"), "plot/{seqid}.sentinel")),
        outdir = str(Path(config.get("path_out"), "plot")),
        ld = str(Path(config.get("path_out"), "ld_reshaped/{seqid}")),
        seqid = "{seqid}"
    #conda:
    #    "envs/environment.yml"
    resources:
        runtime=lambda wc, attempt: 120 + attempt * 60,
    shell:
        """
    loci_list={params.loci};
    ifile=$(echo {params.ld})
    ofile=$(echo {params.ofile})
    seq=$(echo {params.seqid})

    source /exchange/healthds/singularity_functions

    while IFS=, read -r col1 col2 col3 col4 col5 col6_onwards; do
        chr=$col1
        beg=$col2
        end=$col3
        snp=$col5
        target=$(echo $snp | sed -E 's/([0-9]+:[0-9]+):([A-Z]+):([A-Z]+)/\\1_\\2\/\\3/g')
        loc=${{col1}}_${{col2}}_${{col3}}
        region=${{col1}}:${{col2}}-${{col3}}
        ld=${{ifile}}_chr${{loc}}.ld
        prefix=${{seq}}_chr${{loc}}

        #${{ofile}}_chr${{loc}}
        echo "target is: $target"
        echo "region is: $region"
        echo "ld file is: $ld"
        echo "prefix is: $prefix"

        if [[ "$chr" != "chr" ]]; then
        
            echo "Coordinates: ${{loc}}"

            tabix  {input.gwas} $region -h | \
                sed -E 's/([0-9]+:[0-9]+):([A-Z]+):([A-Z]+)/\\1_\\2\/\\3/g' | \
                locuszoom  \
                    --metal - \
                    --markercol SNPID \
                    --pvalcol MLOG10P \
                    --no-transform \
                    --refsnp $target \
                    --flank 500kbp \
                    --build hg19 \
                    --ld $ld \
                    --ld-measure rsquare \
                    --plotonly \
                    --prefix $prefix
            
            # moving plots to the output directory
            mkdir -p {params.outdir}
            mv ${{prefix}}* {params.outdir}
            
            echo "=====================================================================\n\n"
        fi
        
    done < "$loci_list"
    touch {output.sentinel}
        """
